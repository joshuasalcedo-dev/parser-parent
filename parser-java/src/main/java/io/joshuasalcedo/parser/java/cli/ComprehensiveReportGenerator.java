package io.joshuasalcedo.parser.java.cli;

import io.joshuasalcedo.parser.java.model.*;
import io.joshuasalcedo.parser.java.result.*;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.*; /**
 * Generates comprehensive HTML report combining all analyses
 */
public class ComprehensiveReportGenerator {
    
    public void generateReport(ProjectRepresentation project, DependencyResult depResult,
                               MetricsResult metricsResult, GraphResult graphResult,
                               File outputFile) throws IOException {
        generateReport(project, depResult, metricsResult, graphResult, outputFile, null);
    }
    
    public void generateReport(ProjectRepresentation project, DependencyResult depResult,
                               MetricsResult metricsResult, GraphResult graphResult,
                               File outputFile, String projectPath) throws IOException {
        
        // Try to use FreeMarker for better HTML generation if projectPath is provided
        if (projectPath != null) {
            try {
                HtmlReportGenerator htmlGenerator = new HtmlReportGenerator();
                ProjectStatistics statistics = createProjectStatistics(project, metricsResult);
                htmlGenerator.generateComprehensiveReport(project, statistics, 
                    outputFile.getAbsolutePath(), projectPath);
                return;
            } catch (Exception e) {
                System.err.println("Warning: FreeMarker generation failed, falling back to legacy HTML: " + e.getMessage());
            }
        }
        
        // Fallback to legacy HTML generation
        StringBuilder html = new StringBuilder();
        
        html.append("<!DOCTYPE html>\n<html>\n<head>\n");
        html.append("<title>").append(project.getName()).append(" - Comprehensive Analysis Report</title>\n");
        html.append(getComprehensiveStyles());
        html.append(getComprehensiveScripts());
        html.append("</head>\n<body>\n");
        
        // Navigation
        html.append("<nav class=\"navigation\">\n");
        html.append("<ul>\n");
        html.append("<li><a href=\"#overview\">Overview</a></li>\n");
        html.append("<li><a href=\"#dependencies\">Dependencies</a></li>\n");
        html.append("<li><a href=\"#metrics\">Metrics</a></li>\n");
        html.append("<li><a href=\"#visualization\">Visualization</a></li>\n");
        html.append("<li><a href=\"#issues\">Issues</a></li>\n");
        html.append("</ul>\n</nav>\n");
        
        // Content
        html.append("<div class=\"content\">\n");
        
        // Overview section
        html.append(createOverviewSection(project, depResult, metricsResult));
        
        // Dependencies section
        html.append(createDependenciesSection(depResult));
        
        // Metrics section
        html.append(createMetricsSection(metricsResult));
        
        // Visualization section
        html.append(createVisualizationSection(graphResult));
        
        // Issues section
        html.append(createIssuesSection(depResult, metricsResult));
        
        html.append("</div>\n");
        
        // Footer
        html.append("<footer>\n");
        html.append("<p>Generated by Java Parser on ").append(getCurrentTimestamp()).append("</p>\n");
        html.append("</footer>\n");
        
        html.append("</body>\n</html>");
        
        try (FileWriter writer = new FileWriter(outputFile)) {
            writer.write(html.toString());
        }
    }
    
    private String getComprehensiveStyles() {
        return """
            <style>
                * { box-sizing: border-box; }
                body {
                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Arial, sans-serif;
                    margin: 0;
                    padding: 0;
                    background-color: #f5f5f5;
                }
                .navigation {
                    position: fixed;
                    top: 0;
                    left: 0;
                    width: 200px;
                    height: 100vh;
                    background-color: #2c3e50;
                    padding: 20px 0;
                }
                .navigation ul {
                    list-style: none;
                    padding: 0;
                    margin: 0;
                }
                .navigation li {
                    margin: 0;
                }
                .navigation a {
                    display: block;
                    color: white;
                    text-decoration: none;
                    padding: 15px 20px;
                    transition: background-color 0.3s;
                }
                .navigation a:hover {
                    background-color: #34495e;
                }
                .content {
                    margin-left: 200px;
                    padding: 20px;
                }
                .section {
                    background: white;
                    border-radius: 8px;
                    padding: 30px;
                    margin-bottom: 20px;
                    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                }
                .section h2 {
                    margin-top: 0;
                    color: #2c3e50;
                    border-bottom: 2px solid #e0e0e0;
                    padding-bottom: 10px;
                }
                .metric-grid {
                    display: grid;
                    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                    gap: 20px;
                    margin: 20px 0;
                }
                .metric-box {
                    background: #f8f9fa;
                    border-radius: 8px;
                    padding: 20px;
                    text-align: center;
                }
                .metric-box .value {
                    font-size: 32px;
                    font-weight: bold;
                    color: #2c3e50;
                }
                .metric-box .label {
                    font-size: 14px;
                    color: #666;
                    margin-top: 5px;
                }
                .issue-card {
                    background: #fff3cd;
                    border-left: 4px solid #ffc107;
                    padding: 15px;
                    margin: 10px 0;
                    border-radius: 4px;
                }
                .issue-card.critical {
                    background: #f8d7da;
                    border-left-color: #dc3545;
                }
                footer {
                    margin-left: 200px;
                    padding: 20px;
                    text-align: center;
                    color: #666;
                    font-size: 14px;
                }
                .tab-container {
                    margin-top: 20px;
                }
                .tab-buttons {
                    display: flex;
                    border-bottom: 2px solid #e0e0e0;
                }
                .tab-button {
                    padding: 10px 20px;
                    background: none;
                    border: none;
                    cursor: pointer;
                    font-size: 16px;
                    color: #666;
                    transition: all 0.3s;
                }
                .tab-button.active {
                    color: #2c3e50;
                    border-bottom: 2px solid #2c3e50;
                }
                .tab-content {
                    display: none;
                    padding: 20px 0;
                }
                .tab-content.active {
                    display: block;
                }
                pre {
                    background: #f5f5f5;
                    padding: 15px;
                    border-radius: 4px;
                    overflow-x: auto;
                }
            </style>
            """;
    }
    
    private String getComprehensiveScripts() {
        return """
            <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
            <script src="https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js"></script>
            <script>
                mermaid.initialize({ startOnLoad: true });
                
                function switchTab(tabId) {
                    document.querySelectorAll('.tab-button').forEach(btn => btn.classList.remove('active'));
                    document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
                    document.querySelector(`[data-tab="${tabId}"]`).classList.add('active');
                    document.getElementById(tabId).classList.add('active');
                }
            </script>
            """;
    }
    
    private String createOverviewSection(ProjectRepresentation project, DependencyResult depResult, MetricsResult metricsResult) {
        return String.format("""
            <section id="overview" class="section">
                <h2>Project Overview</h2>
                <h3>%s</h3>
                <div class="metric-grid">
                    <div class="metric-box">
                        <div class="value">%s</div>
                        <div class="label">Health Grade</div>
                    </div>
                    <div class="metric-box">
                        <div class="value">%d</div>
                        <div class="label">Total Classes</div>
                    </div>
                    <div class="metric-box">
                        <div class="value">%d</div>
                        <div class="label">Total Methods</div>
                    </div>
                    <div class="metric-box">
                        <div class="value">%d</div>
                        <div class="label">Lines of Code</div>
                    </div>
                    <div class="metric-box">
                        <div class="value">%.1f</div>
                        <div class="label">Avg Complexity</div>
                    </div>
                    <div class="metric-box">
                        <div class="value">%.1f%%</div>
                        <div class="label">Code Duplication</div>
                    </div>
                </div>
            </section>
            """,
            project.getName(),
            metricsResult.projectMetrics().getProjectHealthGrade(),
            metricsResult.projectMetrics().totalClasses(),
            metricsResult.projectMetrics().totalMethods(),
            metricsResult.projectMetrics().totalLinesOfCode(),
            metricsResult.projectMetrics().averageComplexity(),
            metricsResult.projectMetrics().duplicationRatio() * 100
        );
    }
    
    private String createDependenciesSection(DependencyResult depResult) {
        StringBuilder section = new StringBuilder();
        section.append("<section id=\"dependencies\" class=\"section\">\n");
        section.append("<h2>Dependencies Analysis</h2>\n");
        
        // Circular dependencies
        if (!depResult.circularDependencies().isEmpty()) {
            section.append("<h3>⚠️ Circular Dependencies</h3>\n");
            section.append("<ul>\n");
            depResult.circularDependencies().forEach(cycle -> 
                section.append("<li>").append(String.join(" → ", cycle)).append(" → ").append(cycle.get(0)).append("</li>\n")
            );
            section.append("</ul>\n");
        }
        
        // Most coupled classes
        section.append("<h3>Most Coupled Classes</h3>\n");
        section.append("<table>\n<thead>\n<tr>\n");
        section.append("<th>Class</th><th>Afferent Coupling</th><th>Efferent Coupling</th><th>Instability</th>\n");
        section.append("</tr>\n</thead>\n<tbody>\n");
        
        depResult.getMostDependentClasses(10).forEach(className -> {
            int ca = depResult.afferentCoupling().getOrDefault(className, 0);
            int ce = depResult.efferentCoupling().getOrDefault(className, 0);
            double instability = depResult.instability().getOrDefault(className, 0.0);
            
            section.append("<tr>\n");
            section.append("<td>").append(getSimpleName(className)).append("</td>\n");
            section.append("<td>").append(ca).append("</td>\n");
            section.append("<td>").append(ce).append("</td>\n");
            section.append("<td>").append(String.format("%.2f", instability)).append("</td>\n");
            section.append("</tr>\n");
        });
        
        section.append("</tbody>\n</table>\n");
        section.append("</section>\n");
        
        return section.toString();
    }
    
    private String createMetricsSection(MetricsResult metricsResult) {
        return """
            <section id="metrics" class="section">
                <h2>Code Metrics</h2>
                <div class="tab-container">
                    <div class="tab-buttons">
                        <button class="tab-button active" data-tab="complexity-tab" onclick="switchTab('complexity-tab')">Complexity</button>
                        <button class="tab-button" data-tab="duplication-tab" onclick="switchTab('duplication-tab')">Duplication</button>
                        <button class="tab-button" data-tab="usage-tab" onclick="switchTab('usage-tab')">Usage</button>
                    </div>
                    <div id="complexity-tab" class="tab-content active">
                        <canvas id="complexityChart" style="max-height: 400px;"></canvas>
                    </div>
                    <div id="duplication-tab" class="tab-content">
                        <canvas id="duplicationChart" style="max-height: 400px;"></canvas>
                    </div>
                    <div id="usage-tab" class="tab-content">
                        <canvas id="usageChart" style="max-height: 400px;"></canvas>
                    </div>
                </div>
            </section>
            """;
    }
    
    private String createVisualizationSection(GraphResult graphResult) {
        return String.format("""
            <section id="visualization" class="section">
                <h2>Project Visualization</h2>
                <p>Graph Metrics: %d nodes, %d edges, density: %.3f</p>
                <div class="tab-container">
                    <div class="tab-buttons">
                        <button class="tab-button active" data-tab="mermaid-tab" onclick="switchTab('mermaid-tab')">Interactive Diagram</button>
                        <button class="tab-button" data-tab="dot-tab" onclick="switchTab('dot-tab')">DOT Graph</button>
                    </div>
                    <div id="mermaid-tab" class="tab-content active">
                        <div class="mermaid">
                            %s
                        </div>
                    </div>
                    <div id="dot-tab" class="tab-content">
                        <pre>%s</pre>
                    </div>
                </div>
            </section>
            """,
            graphResult.getNodeCount(),
            graphResult.getEdgeCount(),
            graphResult.getGraphDensity(),
            graphResult.mermaidDiagram(),
            escapeHtml(graphResult.dotGraph())
        );
    }
    
    private String createIssuesSection(DependencyResult depResult, MetricsResult metricsResult) {
        StringBuilder section = new StringBuilder();
        section.append("<section id=\"issues\" class=\"section\">\n");
        section.append("<h2>Issues and Recommendations</h2>\n");
        
        // Critical issues
        if (depResult.hasCircularDependencies()) {
            section.append("<div class=\"issue-card critical\">\n");
            section.append("<strong>Critical:</strong> ");
            section.append(depResult.circularDependencies().size()).append(" circular dependencies detected\n");
            section.append("</div>\n");
        }
        
        // Warnings
        if (!metricsResult.codeDuplicates().isEmpty()) {
            section.append("<div class=\"issue-card\">\n");
            section.append("<strong>Warning:</strong> ");
            section.append(metricsResult.codeDuplicates().size()).append(" code duplications found\n");
            section.append("</div>\n");
        }
        
        if (!metricsResult.unusedClasses().isEmpty()) {
            section.append("<div class=\"issue-card\">\n");
            section.append("<strong>Warning:</strong> ");
            section.append(metricsResult.unusedClasses().size()).append(" potentially unused classes\n");
            section.append("</div>\n");
        }
        
        // Recommendations
        section.append("<h3>Recommendations</h3>\n");
        section.append("<ul>\n");
        metricsResult.projectMetrics().getRecommendations().forEach(rec -> 
            section.append("<li>").append(rec).append("</li>\n")
        );
        section.append("</ul>\n");
        
        section.append("</section>\n");
        return section.toString();
    }
    
    private String getSimpleName(String fullyQualifiedName) {
        int lastDot = fullyQualifiedName.lastIndexOf('.');
        return lastDot > 0 ? fullyQualifiedName.substring(lastDot + 1) : fullyQualifiedName;
    }
    
    private String escapeHtml(String text) {
        return text.replace("&", "&amp;")
                  .replace("<", "&lt;")
                  .replace(">", "&gt;")
                  .replace("\"", "&quot;");
    }
    
    private String getCurrentTimestamp() {
        return LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));
    }
    
    private ProjectStatistics createProjectStatistics(ProjectRepresentation project, MetricsResult metricsResult) {
        int totalClasses = 0, totalInterfaces = 0, totalEnums = 0, totalAbstractClasses = 0;
        int totalMethods = 0, totalFields = 0, totalConstructors = 0;
        int totalPublicMethods = 0, totalPrivateMethods = 0, totalProtectedMethods = 0, totalStaticMethods = 0;
        int totalAnnotations = 0, totalLinesOfCode = 0;
        
        Map<String, Integer> annotationUsage = new HashMap<>();
        Map<String, Integer> packageDistribution = new HashMap<>();
        List<ClassComplexity> classComplexities = new ArrayList<>();
        
        for (ClassRepresentation cls : project.getClasses()) {
            // Count class types
            if (cls.isInterface()) totalInterfaces++;
            else if (cls.isEnum()) totalEnums++;
            else if (cls.isAbstract()) totalAbstractClasses++;
            else totalClasses++;
            
            // Count methods and fields
            totalMethods += cls.getMethods().size();
            totalFields += cls.getFields().size();
            totalConstructors += cls.getConstructors().size();
            
            // Package distribution
            String packageName = cls.getPackageName().isEmpty() ? "default" : cls.getPackageName();
            packageDistribution.merge(packageName, 1, Integer::sum);
            
            // Class complexity (using method count + dependency count from metrics if available)
            int dependencyCount = cls.getMethods().size() + cls.getFields().size();
            if (metricsResult != null && metricsResult.classMetrics() != null) {
                ClassMetrics metrics = metricsResult.classMetrics().stream()
                    .filter(m -> m.className().equals(cls.getName()))
                    .findFirst()
                    .orElse(null);
                if (metrics != null) {
                    dependencyCount = metrics.efferentCoupling() + metrics.afferentCoupling();
                }
            }
            
            classComplexities.add(new ClassComplexity(
                cls.getName(),
                cls.getMethods().size(),
                cls.getFields().size(),
                dependencyCount
            ));
            
            // Estimate lines of code
            totalLinesOfCode += cls.getMethods().size() * 10 + cls.getFields().size() * 2;
        }
        
        return new ProjectStatistics(
            totalClasses, totalInterfaces, totalEnums, totalAbstractClasses,
            totalMethods, totalFields, totalConstructors,
            totalPublicMethods, totalPrivateMethods, totalProtectedMethods, totalStaticMethods,
            totalAnnotations, totalLinesOfCode,
            annotationUsage, packageDistribution, classComplexities
        );
    }
}
